path_to_file1 = '<insert path of file1 here>'
path_to_file2 = '<insert path of file2 here>'
path_to_final_output_file = '<insert desired path here>'

# To make the code simpler, I first create a single string that I
# will append each successive line to. At the end, I will just dump
# the whole thing into a new file and call it a day. 

final_output_contents = ''

with open(path_to_file1, 'r') as file1:
     
    for line in file1:

    # split '> scaffold1          0        206        transcript_ loc.00001      exon '
    # into ['>', 'scaffold1', '0', '206', 'transcript_loc.00001', 'exon']
    # then take the third and fourth elements respectively to get 
    # your interval

        # `.split()` will break the string up by whitespace, [2:4]
        # is Python's slice notation, basically a clever way to select
        # elements in an array. This will return 0, 206 for the first 
        # line in the example.

        interval_start, interval_end = line.split()[2:4]

        # now read through the entirety of `file2`. Do the same
        # as before: split each line, get the coordinates, and this time
        # check if they meet the condition that they are in the interval

        with open(path_to_file2, 'r') as file2:
            for other_line in file2:

                first_coordinate, second_coordinate = other_line.split()[1:3]

                # `int()` converts its arguments into integers - we need it
                # because 
                if (int(interval_start) < int(first_coordinate) and 
                    int(interval_end) > int(second_coordinate)):

                    # this is just a fancy way of adding `line` and 
                    # the last three elements of `other_line` together
                    line += '\t'.join(other_line.split()[-3:])

                    # break the `for other_line in file2` loop! 
                    break

        # add this line to your final file, making sure to add
        # a newline character '\n' so your text editor will insert
        # an appropriate line break.

        final_output_contents += line + '\n'

# now dump the contents to your file
with open(path_to_final_output_file, 'w') as final_output_file:
    final_output_file.write(final_output_contents)